{
  "name": "bearer",
  "version": "0.0.13",
  "description": "Bearer authentication module using token and Authorization HTTP header",
  "main": "bearer.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/dselmanovic/bearerjs.git"
  },
  "keywords": [
    "Bearer",
    "Authentication",
    "Authorization",
    "Token"
  ],
  "author": {
    "name": "Demir Selmanovic"
  },
  "license": "ISC",
  "dependencies": {
    "node-cryptojs-aes": "~0.4.0"
  },
  "readme": "BearerJS\r\n========\r\n\r\nNodeJS/ExpressJS module for Bearer/Token authentication.\r\nOften used for RESTful API, Smartphones etc to authenticate users without active session\r\n\r\nUsage\r\n=====\r\n\r\nYou can find fully functional demo at:\r\n```\r\nhttps://github.com/dselmanovic/BearerJSDemo.git\r\n```\r\n\r\nIn your NodeJS app\r\n------------------\r\nIn your ExpressJS application init script, add the following before setting any other route. You will notice that you are free to create token content as you like.\r\n\r\n```javascript\r\nvar bearer = require('bearer');\r\nvar app = express();\r\n//Setup authentication\r\n//This should be done before all routes are configured to assure that authorization will be first to execute\r\nbearer({\r\n    //Make sure to pass in the app (express) object so we can set routes\r\n    app:app,\r\n    //Please change server key for your own safety!\r\n    serverKey:\"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678\",\r\n    tokenUrl:'/token', //Call this URL to get your token. Accepts only POST method\r\n    createToken:function(req){\r\n        //If your user is not valid just return \"underfined\" from this method.\r\n        //Your token will be added to req object and you can use it from any method later\r\n        var username=req.body.username;\r\n        var userValid=true; //You are aware that this is where you check username/password in your DB, right!?\r\n        if (userValid) return({\r\n            expire: moment(Date.now()).add('days', 1).format('YYYY-MM-DD HH:mm:ss'),\r\n            username: username,\r\n            contentType: req.get('Content-Type'),\r\n            ip: req.ip,\r\n            userAgent: req.header('user-agent'),\r\n            custom_id: '55555',\r\n            another: 'Some data you need in your token',\r\n            moreData: 'Some more data you need'\r\n        });\r\n        return undefined;\r\n    },\r\n    validateToken:function(req, token){\r\n        //you could also check if request came from same IP using req.ip==token.ip for example\r\n        if (token){\r\n            return moment(token.expire)>moment(new Date());\r\n        }\r\n        return false;\r\n    },\r\n    onTokenValid:function(token){\r\n        //This is in case you would like to check user account status in DB each time he attempts to do something.\r\n        //Doing this will affect your performance but its your choice if you really need it\r\n        //Returning false from this method will reject user even if his token is OK\r\n        return true;\r\n    },\r\n    onAuthorized: function(req, token){\r\n        console.log(\"this will be executed if request is OK\");\r\n    },\r\n    onUnauthorized: function(req, token){\r\n        console.log(\"this will be executed if request fails authentication\");\r\n    },\r\n    secureRoutes:[\r\n        {url:'/secure', method:'get'},\r\n        {url:'/secure/*', method:'get'}\r\n    ]\r\n});\r\n```\r\n\r\nSettings passed to BearerJS:\r\n* app: Your expressJS app object. We will add one route (default /token) and middleware for processing requests to it\r\n* serverKey: This is token encryption key. PLEASE PLEASE chnage it in your application\r\n* tokenURL: We will add this route for POST method as end point for user authentication to generate token\r\n* createToken: Use this function to generate any token content you might need. Token will be encrypted and sent back as response from tokenURL request\r\n* validateToken: This method will provide you with decrypted token from request. Use it wisely to verify that it is ok\r\n* onTokenValid: Sometimes you will not want to rely only on token validation. Once request is validated using token, you do additional check (perhaps check status in db etc.)\r\n* onAuthorized: In case you want to do something when request is authenticated (ex. log something)\r\n* onUnauthorized: In case that you want to do something when request is not authenticated\r\n* secureRoutes: Just add routes you want to have secured. You can use \"*\" to define pattern\r\n\r\nYour TOKEN will be added to request and you can access it in any other action later. For example:\r\n\r\n```javascript\r\nrouter.get('/someroute', function(req, res) {\r\n  console.log(req.authToken);\r\n  res.send('Respond with a resource');\r\n});\r\n```\r\n\r\nIn your Client app\r\n------------------\r\nYou need to get your token first. Probably during application startup or login\r\n\r\nPOST http://yoururl/token\r\n\r\nUse whatever x-www-form-urlencoded parameters that your \"createToken\" function will use to validate user credentials and create token.\r\n\r\nWhen you get back response containing token similar to:\r\n```javascript\r\n{\r\n    \"access_token\": \"U2FsdGVkX1+xSwd3f8WPCmM4WDOuZB1jblNArZEP/iKUu/ZF3+i9RZxGZuR5wnaMxw2wUjf4KbNQMjLderxDSTro2W9r7dbadltV+W1PbX3KTm5hbz4XYCdS7E4rlEALaKIBNyFyaBF9j8R+OpHEnddehW6pOAMfRmPPMqpfe20iIqdm3og+KZEU75qPXKZN04+XZGJFKpv557km0iF2KIBsYl4BrdeinJE4fU5wjvZMdv/C8u/hfRfFZZAGv9RC9TfEdD1HDvEynvtzwESuxdiqCOu6KPM4QoFTLHEo8Aj40WyoYEMFYPJOMI2fycej9SR5CcR/RJJFU6Q+IfKJ6cZIijpPnF6oYDqI/XbQYBV2fCEO3oTJeNxhaYpZaVBbRqV+AKasIGMonBK3rSeiHlPu9wLkfa6vZbDPqhKmZrAE6JrO8oaJJqogbu4TXu37Jw2qRLd0Z9IdZQT9EjjJPUJTfSljbM5YS3mLTfn+pjQ=\",\r\n    \"expDate\": \"2014-06-18 22:52:23\"\r\n}\r\n```\r\n\r\nYou can use it in subsequential requests as part of your HTTP Header (dont forget the \"Bearer \" prefix)\r\n\r\n```\r\nAuthorization=Bearer U2FsdGVkX1+xSwd3f8WPCmM4WDOuZB1jblNArZEP/iKUu/ZF3+i9RZxGZuR5wnaMxw2wUjf4KbNQMjLderxDSTro2W9r7dbadltV+W1PbX3KTm5hbz4XYCdS7E4rlEALaKIBNyFyaBF9j8R+OpHEnddehW6pOAMfRmPPMqpfe20iIqdm3og+KZEU75qPXKZN04+XZGJFKpv557km0iF2KIBsYl4BrdeinJE4fU5wjvZMdv/C8u/hfRfFZZAGv9RC9TfEdD1HDvEynvtzwESuxdiqCOu6KPM4QoFTLHEo8Aj40WyoYEMFYPJOMI2fycej9SR5CcR/RJJFU6Q+IfKJ6cZIijpPnF6oYDqI/XbQYBV2fCEO3oTJeNxhaYpZaVBbRqV+AKasIGMonBK3rSeiHlPu9wLkfa6vZbDPqhKmZrAE6JrO8oaJJqogbu4TXu37Jw2qRLd0Z9IdZQT9EjjJPUJTfSljbM5YS3mLTfn+pjQ=\r\n```\r\n\r\n\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dselmanovic/bearerjs/issues"
  },
  "homepage": "https://github.com/dselmanovic/bearerjs",
  "_id": "bearer@0.0.13",
  "_shasum": "03b22a02acf9df36b1cab16ccd1064186193ae45",
  "_from": "bearer@0.0.13"
}
